schema {
  query: Query
  mutation: Mutation
}

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type Account {
  code: String!
  elementType: Int!
  id: ID!
  name: String!
}

type DeleteAccountPayload {
  deletedAccount: Account
}

type Journal {
  id: ID!
  journalEntries: [JournalEntry!]!
}

type JournalEntry {
  id: ID!
  side: Int!
  value: Int!
}

type Snack {
  id: ID!
  name: String!
  price: Int!
}

type Mutation {
  createAccount(input: CreateAccountInput!): Account!
  deleteAccount(input: DeleteAccountInput!): DeleteAccountPayload!
  updateAccount(input: UpdateAccountInput!): Account!
}

type Query {
  allAccounts: [Account!]!
  allJournals: [Journal!]!
  allSnacks: [Snack!]!
}

input CreateAccountInput {
  code: String!
  elementType: Int!
  name: String!
}

input DeleteAccountInput {
  id: ID!
}

input UpdateAccountInput {
  code: String!
  elementType: Int!
  id: ID!
  name: String!
}
